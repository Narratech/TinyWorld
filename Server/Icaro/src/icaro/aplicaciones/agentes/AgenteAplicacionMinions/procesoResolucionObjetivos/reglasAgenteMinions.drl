import icaro.infraestructura.recursosOrganizacion.recursoTrazas.ItfUsoRecursoTrazas;
import icaro.infraestructura.recursosOrganizacion.recursoTrazas.imp.componentes.InfoTraza;
import icaro.infraestructura.entidadesBasicas.procesadorCognitivo.*;
import icaro.infraestructura.patronAgenteCognitivo.procesadorObjetivos.gestorTareas.ItfGestorTareas;
import icaro.infraestructura.entidadesBasicas.PerformativaUsuario;
import icaro.infraestructura.entidadesBasicas.comunicacion.*
import icaro.aplicaciones.agentes.AgenteAplicacionMinions.objetivos.*;
import icaro.aplicaciones.informacion.gestionCitas.*;
import icaro.aplicaciones.informacion.minions.*;
import icaro.aplicaciones.agentes.AgenteAplicacionMinions.tareas.*;
import icaro.infraestructura.entidadesBasicas.informes.*;

global ItfGestorTareas gestorTareas;
global ItfUsoRecursoTrazas recursoTrazas;
global String agentId;

rule "Creacion de los objectivos iniciales"
when 
then 
TareaSincrona tarea = gestorTareas.crearTareaSincrona(InicializarInfoWorkMem.class);
    tarea.ejecutar();
recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTO LA REGLA: " + drools.getRule().getName()); 
end
// =======================================================================
//Reglas de focalizacion de objetivos.
rule "Regla de focalizacion de explorar"
 when
    f:Focus(foco == null )
    obj:Explorar()
 then
    f.setFoco(obj);
    recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTO LA REGLA: " + drools.getRule().getName());
    update(f);
end

// =======================================================================
//Reglas de generacion de objetivos.
rule "Regla de generacion de explorar"
 when
    f:Focus(foco == null)
    notif:Notificacion(identInterlc:identNotificador, tipoNotificacion==VocabularioControlMinions.NombreTipoNoticacionExplorar)
 then
 	recursoTrazas.aceptaNuevaTraza(new InfoTraza(agentId,"Ejecuto la tarea : Generar objetivo de exploracion",InfoTraza.NivelTraza.debug));
 	TareaSincrona tarea = gestorTareas.crearTareaSincrona(GenerarObjetivoExploracion.class);
 	tarea.ejecutar(notif);
 	retract(notif);
    recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTO LA REGLA: " + drools.getRule().getName());
end

// =============================== exploracion =======================================
// Reclas de realizacion de eploracion
rule "Regla de realizacion de explorar"
 when
 	obj:Explorar(zon:zone, state==Objetivo.PENDING)
    f:Focus(foco == obj)
 then
 	recursoTrazas.aceptaNuevaTraza(new InfoTraza(agentId,"Ejecuto la tarea : Moverse ",InfoTraza.NivelTraza.debug));
 	TareaSincrona tarea = gestorTareas.crearTareaSincrona(SeleccionarZonaExploracion.class);
 	tarea.ejecutar(zon);
    recursoTrazas.aceptaNuevaTraza(new InfoTraza(agentId,"Realizando el objetivo : "+obj.getgoalId()+"  Ejecutando la tarea : "+ tarea.getIdentTarea() ,InfoTraza.NivelTraza.debug));
    recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTO LA REGLA: " + drools.getRule().getName());
end

rule "Regla de finalizacion del movimiento y observacion"
 when
 	obj:Explorar(zon:zone, state==Objetivo.PENDING)
    f:Focus(foco == obj)
    event:GameEvent(name=="event finished")
 then
 	recursoTrazas.aceptaNuevaTraza(new InfoTraza(agentId,"Ejecuto la tarea : Observar ",InfoTraza.NivelTraza.debug));
 	TareaSincrona tarea = gestorTareas.crearTareaSincrona(Observar.class);
 	tarea.ejecutar();
 	retract(event);
    recursoTrazas.aceptaNuevaTraza(new InfoTraza(agentId,"Realizando el objetivo : "+obj.getgoalId()+"  Ejecutando la tarea : "+ tarea.getIdentTarea() ,InfoTraza.NivelTraza.debug));
    recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTO LA REGLA: " + drools.getRule().getName());
end

rule "Regla de finalizacion de la observacion"
 when
 	obj:Explorar(zon:zone, state==Objetivo.PENDING)
    f:Focus(foco == obj)
    event:GameEvent(name=="observation finished")
 then
 	recursoTrazas.aceptaNuevaTraza(new InfoTraza(agentId,"Ejecuto la tarea : almacenar informacion nueva ",InfoTraza.NivelTraza.debug));
 	TareaSincrona tarea = gestorTareas.crearTareaSincrona(AlmacenarInformacionNueva.class);
 	tarea.ejecutar();
 	retract(event);
    recursoTrazas.aceptaNuevaTraza(new InfoTraza(agentId,"Realizando el objetivo : "+obj.getgoalId()+"  Ejecutando la tarea : "+ tarea.getIdentTarea() ,InfoTraza.NivelTraza.debug));
    recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTO LA REGLA: " + drools.getRule().getName());
end

// ========================= MOVIMIENTO ==============================

rule "AUX generar alcanzar posición test"
 when
 	event:GameEvent(name.equals("AlcanzarPosicion"))
 	mi:MinionInfo()
 	eval ( event.getParameter("entity").equals(mi.getInstanceId()) )
 then
    Objetivo ap = new AlcanzarPosicion((Coord) event.getParameter("cell"), (Integer) event.getParameter("distance"));
    insert(ap);
    recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTO LA REGLA: " + drools.getRule().getName());
end


rule "Regla de focalizacion de alcanzar posicion"
 when
    obj:AlcanzarPosicion(state==Objetivo.PENDING)
    f:Focus(foco == null || foco==obj.getParent())
 then
    f.setFoco(obj);
    recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTO LA REGLA: " + drools.getRule().getName());
    update(f);
end

rule "Regla de resolucion de alcanzar posicion"
 when
    obj:AlcanzarPosicion(state==Objetivo.PENDING)
    mi:MinionInfo()
    mc:MinionContext()
    f:Focus(foco==obj)
 then
    obj.setState(Objetivo.SOLVING);
    TareaSincrona tarea = gestorTareas.crearTareaSincrona(Moverse.class);
 	tarea.ejecutar(mi, mc, obj.getCoord(), obj.getDistance());
    recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTO LA REGLA: " + drools.getRule().getName());
    update(obj);
end

rule "Regla de consecucion de alcanzar posicion"
 when
    obj:AlcanzarPosicion(state==Objetivo.SOLVING)
    f:Focus(foco==obj)
    report:GameEvent(name.equalsIgnoreCase("event finished"))
    mi:MinionInfo()
    eval(((GameEvent)report.getParameter("event")).getName().equals("move") && ((GameEvent)report.getParameter("event")).getParameter("entity").equals(mi.getInstanceId()) )
 then
  	recursoTrazas.aceptaNuevaTraza(new InfoTraza(agentId,"Ejecuto la tarea : Evaluar el resultado del movimiento ",InfoTraza.NivelTraza.debug));
    TareaSincrona tarea = gestorTareas.crearTareaSincrona(EvaluaResultadoMovimiento.class);
 	tarea.ejecutar(obj, mi, report);
    recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTO LA REGLA: " + drools.getRule().getName());
end

rule "Regla de finalizacion correcta de alcanzar posicion"
 when
    obj:AlcanzarPosicion(state==Objetivo.SOLVED)
    f:Focus(foco==obj)
 then
    f.setFoco(obj.getParent());
    recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTO LA REGLA: " + drools.getRule().getName());
    recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId,"Nuevo Foco : " + f.getFoco());
    retract(obj);
end

rule "Regla de finalizacion incorrecta de alcanzar posicion"
 when
    obj:AlcanzarPosicion(state==Objetivo.FAILED)
    f:Focus(foco==obj)
 then
 	// TODO resolver esta regla al darse error
    recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTO LA REGLA: " + drools.getRule().getName());
end

// ========================= Obtencion de un objeto ==============================

/*rule "Regla de focalizacion de obtener objeto"
 when
    obj:ObtenerObjeto(state==Objetivo.PENDING)
    f:Focus(foco==null)
 then
    f.setFoco(obj);
    recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTO LA REGLA: " + drools.getRule().getName());
    update(f);
end


rule "Regla de resolucion de ObtenerObjeto si conozco informacion del objeto"
 when
    obj:ObtenerObjeto(o:objeto,state==Objetivo.PENDING)
    f:Focus(foco==obj)
    i:Item(name==o)
 then
    f.setFoco(obj);
    obj.setState(Objetivo.SOLVING);
    TareaSincrona tarea = gestorTareas.crearTareaSincrona(Moverse.class);
 	tarea.ejecutar(i, obj.getDistance());
    recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTO LA REGLA: " + drools.getRule().getName());
    update(f);
    update(obj);
end

rule "Regla de resolucion de ObtenerObjeto si no conozco informacion"
 when
    obj:ObtenerObjeto(o:objeto,state==Objetivo.PENDING)
    f:Focus(foco == obj)
    not ( Item(name==o) )
 then
    TareaSincrona tarea = gestorTareas.crearTareaSincrona(Observar.class);
 	tarea.ejecutar(i, obj.getDistance());
    recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTO LA REGLA: " + drools.getRule().getName());
end*/

rule "Actualiza el estado del minion con alta prioridad"
salience +10
when
	event:GameEvent(name.equalsIgnoreCase("update minion"))
	mi:MinionInfo()
	eval ( ((MinionInfo)event.getParameter("minion")).getInstanceId() == mi.getInstanceId() )
then
	retract(mi);
	insert((MinionInfo)event.getParameter("minion"));
	retract(event);
end

rule "Limpieza de evento en memoria con baja prioridad"
salience -10 
when
	event:GameEvent()
then
	retract(event);
end

// ####################### Proceso de resolución de objetivos por equipos #############################

// ========================= Descubrimiento y planificación de la tarea ==============================

rule "Descubre objetivo propuesto"
when
	mc:MinionContext()
	obj:Subobjetivo()
	f:Focus(foco==null)
	eval(obj.getParent() == null)
	not ( exists ( ArbolObjetivos() ) )
then
	TareaSincrona tarea = gestorTareas.crearTareaSincrona(CrearArbolObjetivos.class);
 	tarea.ejecutar(mc, obj);
	
	recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTO LA REGLA: " + drools.getRule().getName());
end

// ========================== Gestion de la lista de integrantes =====================================

rule "Acepta solicitud de participacion"
when
	f:Focus(foco==null)
	event:GameEvent(name.equalsIgnoreCase("solicitud participacion"))
then
	TareaSincrona tarea = gestorTareas.crearTareaSincrona(AceptarSolicitudParticipacion.class);
 	tarea.ejecutar(f, event);
 	
	recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTO LA REGLA: " + drools.getRule().getName());
end

rule "Mezcla listas"
when
	obj:CrearListaIntegrantes(state == Objetivo.SOLVING)
	f:Focus(foco==obj)
	lista1:ArbolObjetivos.ListaIntegrantes()
	lista2:ArbolObjetivos.ListaIntegrantes()
	eval (lista1 != lista2)
then
// Intento la mezcla y si hay cambios reenvío
	ArbolObjetivos.ListaIntegrantes listaAux;
	if(listaAux = lista1.mezclarCon(lista2)){
		lista1.reenviarATodosSalvoA(agentId);
	}

// Me guardo la lista actual, para cuando salte el timeout
	obj.lista = lista1;
		
// En cualquier caso inicio el timeout
	TareaSincrona tarea = gestorTareas.crearTareaSincrona(ComenzarTimeoutListaIntegrantes.class);
    tarea.ejecutar(obj, lista1);
	
// Me cargo la que es antigua
 	
	recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTO LA REGLA: " + drools.getRule().getName());
	retract(lista2);
end

rule "Gestion de informe de timeout correcto"
when
	f : Focus(obj:foco)
	infoTarea : InformeDeTarea(identTarea.equalsIgnoreCase("ComenzarTimeoutListaIntegrantes"))
	arbol : ArbolObjetivos()
// si aún estoy creando la lista
	eval ( obj.getgoalId().equals("CrearListaIntegrantes") && obj.getState() == Objetivo.SOLVING 
// Si mi lista no ha cambiado desde el inicio del timeout entonces doy por finalizado el objetivo
		&& ((CrearListaIntegrantes) obj).lista.equals(infoTarea.contenidoInforme) )
then
// Este método solo afecta la primera vez.
	arbol.setListaIntegrantes(((CrearListaIntegrantes) obj).lista);
	update(arbol);
	arbol.enviarArbolActualizado(agentId); 

// Finalmente me deshago del informe
	retract(infoTarea);
	
	recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTO LA REGLA: " + drools.getRule().getName());
end

rule "Eliminar informe timeout con baja prioridad"
salience -10
when
	infoTarea : InformeDeTarea(identTarea.equalsIgnoreCase("ComenzarTimeoutListaIntegrantes"))
then
	retract(infoTarea);
	recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTO LA REGLA: " + drools.getRule().getName());
end

rule "Finalizacion del objetivo crear lista de integrantes"
when
	obj:CrearListaIntegrantes(state == Objetivo.SOLVING)
	f:Focus(foco == obj)
	arbol:ArbolObjetivos(listaIntegrantes != null)
then
// Al terminar, el minon se moverá a 0,0
//	Objetivo o = new AlcanzarPosicion(new Coord(0,0), 0);
//	insert(o);
//	f.setFoco(o);
//	update(f);
	retract(obj);
	
	recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTO LA REGLA: " + drools.getRule().getName());
end

rule "Limpieza de listas en memoria con prioridad"
salience 10
when
	obj:CrearListaIntegrantes(state == Objetivo.SOLVED)
	lista:ArbolObjetivos.ListaIntegrantes()
then
	retract(lista);
	recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTO LA REGLA: " + drools.getRule().getName());
end

rule "Actualización del arbol local con prioridad"
salience 10
when
	arbol1:ArbolObjetivos()
	arbol2:ArbolObjetivos()
	eval ( !arbol1.equals(arbol2) )
then
	ArbolObjetivos masActualizado = ArbolObjetivos.SeleccionaArbolMasActualizado(arbol1,arbol2);
	if(masActualizado == arbol1){
		retract(arbol2);
	}else if( masActualizado == arbol2){
		retract(arbol1);
	}
		
	recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTO LA REGLA: " + drools.getRule().getName());
end
	
	



